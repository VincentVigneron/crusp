var searchIndex = {};
searchIndex["crusp"] = {"doc":"","items":[[0,"variables","crusp","",null,null],[3,"VariableId","crusp::variables","",null,null],[3,"ArrayOfVarsBuilder","","Represents an array of `Variable` builder.",null,null],[3,"ArrayOfVars","","Represents an array of `Variable`.",null,null],[3,"ArrayOfRefs","","Represents an array of references to `Variable`.",null,null],[4,"VariableState","","Describes the state of a variable after its domain is updated.",null,null],[13,"MaxBoundChange","","If only the maximal bound of the variable has been updated.",0,null],[13,"MinBoundChange","","If only the minimal bound of the variable has been updated.",0,null],[13,"BoundsChange","","If both bounds of the variable has been updated.",0,null],[13,"ValuesChange","","If the domain has been change but not its bounds.",0,null],[13,"NoChange","","If no change occured.",0,null],[4,"VariableError","","Represents an error that occured during variable domain update.",null,null],[13,"DomainWipeout","","The domain of the variable is empty.",1,null],[0,"bool_var","","",null,null],[3,"BoolVar","crusp::variables::bool_var","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"boolvar"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"boolvar"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"boolvar"}],"output":{"name":"bool"}}],[11,"new","","",2,{"inputs":[],"output":{"generics":["boolvar"],"name":"option"}}],[11,"iter","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"set_value","","",2,null],[11,"is_affected","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"value","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variableid"}}],[11,"size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"equal","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"in_values","","",2,{"inputs":[{"name":"self"},{"name":"values"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[11,"remove_value","","",2,null],[11,"remove_if","","",2,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[11,"retains_if","","",2,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[11,"not_equal","","",2,{"inputs":[{"name":"self"},{"name":"boolvar"}],"output":{"generics":["variableerror"],"name":"result"}}],[0,"domains","crusp::variables","",null,null],[8,"FiniteDomain","crusp::variables::domains","Trait that defines variables with finite domains. In other words the number of elements of the domain is countable). Every variable should have a finite domain.",null,null],[10,"size","","The number of elements of the domain.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"IterableDomain","","Trait that definies variable allowing to iter through the elements of its domain.",null,null],[10,"iter","","Returns an `Iterator` over the elements of the domain.",4,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[8,"FromRangeDomain","","Trait that defines variableswhich the domain can be deduced from an interval.",null,null],[10,"new_from_range","","Returns a new variable from an interval or return `None` if the interval is not valid (max < min). The domain of the new created variable contains `min` and `max`.",5,null],[8,"FromValuesDomain","","Trait that defines variable which the domain can be deduced from a list of values.",null,null],[10,"new_from_values","","Returns a new variable from an `Iterator` of values or `None` if the list of values is empty.",6,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[8,"AssignableDomain","","Trait that defines variable that can be assigned to a specific value.",null,null],[10,"set_value","","Change the value of the variable. Returns an error of type `VariableError::DomainWipeout` if value is not inside the domain, otherwise returns the correct `VariableState`;",7,null],[8,"OrderedDomain","","Trait that defines variable which the underlying `Type` implements the `Ord` trait (i.e. the underlying type is totally ordered).",null,null],[10,"min","","Returns the minimal value of the domain.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"max","","Returns the maximal value of the domain.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unchecked_min","","",8,null],[11,"unchecked_max","","",8,null],[10,"strict_upperbound","","Forces the upperbound of the variable to be strictly lesser than `ub`. Returns an error of type `VariableError::DomainWipeout` if the new upperbound is lesser than the minimal value of the domain, otherwise returns the correct `VariableState`.",8,null],[10,"weak_upperbound","","Forces the upperbound of the variable to be lesser than `ub`. Returns an error of type `VariableError::DomainWipeout` if the new upperbound is strictly lesser than the minimal value of the domain, otherwise returns the correct `VariableState`.",8,null],[10,"strict_lowerbound","","Forces the lowerbound of the variable to be strictly greater than `lb`. Returns an error of type `VariableError::DomainWipeout` if the new lowerbound is greater than the maximal value of the domain, otherwise returns the correct `VariableState`.",8,null],[10,"weak_lowerbound","","Forces the lowerbound of the variable to be greater than `lb`. Returns an error of type `VariableError::DomainWipeout` if the new lowerbound is strictly lesser than the maximal value of the domain, otherwise returns the correct `VariableState`.",8,null],[11,"less_than","","Forces the domain of `self` to satisfies a precedence relation with `value`. Returns an error of type `VariableError::DomainWipeout` if the minimal value of `self` is greater or equal to the maximal value of `value`, otherwise returns the correct `VariableState`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"less_or_equal_than","","Forces the domain of `self` to satisfies a weak precedence relation with `value`. Returns an error of type `VariableError::DomainWipeout` if the minimal value of `self` is greater to the maximal value of `value`, otherwise returns the correct `VariableState`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"greater_than","","Forces the domain of `value` to satisfies a strict precedence relation with `self`. Returns an error of type `VariableError::DomainWipeout` if the minimal value of `value` is greater or equal to the maximal value of `self`, otherwise returns the correct `VariableState`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"greater_or_equal_than","","Forces the domain of `value` to satisfies a weak precedence relation with `self`. Returns an error of type `VariableError::DomainWipeout` if the minimal value of `value` is greater to the maximal value of `self`, otherwise returns the correct `VariableState`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"equal_bounds","","Forces the domains of two variables two have the same bounds (the does not imply to have the same domain). Returns an error of type `VariableError::DomainWipeout` if the two variables can't have the same bounds (i.e. no common value), otherwise returns the correct `VariableState`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[8,"PrunableDomain","","Trait that definies variable that allows to remove any values from its domains.",null,null],[10,"equal","","Forces the domain of two variables to be equal.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[10,"not_equal","","Forces the value of two varaibles to be distinct.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[10,"in_values","","Forces the domain of the variables to be in the values past has parameter.",9,{"inputs":[{"name":"self"},{"name":"values"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[10,"remove_value","","Remove the value from the domain of a variable.",9,null],[10,"remove_if","","Remove the values of the domain that satisfies the predicate.",9,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[10,"retains_if","","Remove the values of the domain that does not satisfy the predicate.",9,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[8,"OrderedPrunableDomain","","Trait that definies variable that allows to remove any values from its domains.",null,null],[10,"in_sorted_values","","Forces the domain of the variables to be in the values past has parameter.",10,{"inputs":[{"name":"self"},{"name":"values"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[0,"int_var","crusp::variables","",null,null],[3,"IntVarBounds","crusp::variables::int_var","",null,null],[3,"IntVarIntervals","","",null,null],[3,"IntVarValues","","",null,null],[3,"IntVarValuesBuilder","","",null,null],[0,"tests","","",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"intvarvaluesbuilder"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"intvarvaluesbuilder"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"intvarvaluesbuilder"}],"output":{"name":"bool"}}],[11,"new","","",11,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"generics":["intvarvaluesbuilder"],"name":"option"}}],[11,"finalize","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intvarvalues"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"intvarvalues"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"intvarvalues"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"intvarvalues"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"generics":["intvarvalues"],"name":"option"}}],[11,"iter","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"new_from_range","","",12,null],[11,"new_from_values","","",12,{"inputs":[{"name":"values"}],"output":{"generics":["intvarvalues"],"name":"option"}}],[11,"set_value","","",12,null],[11,"is_affected","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"value","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"id","","",12,{"inputs":[{"name":"self"}],"output":{"name":"variableid"}}],[11,"size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"min","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strict_upperbound","","",12,null],[11,"weak_upperbound","","",12,null],[11,"strict_lowerbound","","",12,null],[11,"weak_lowerbound","","",12,null],[11,"equal","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"in_values","","",12,{"inputs":[{"name":"self"},{"name":"values"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[11,"remove_value","","",12,null],[11,"remove_if","","",12,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[11,"retains_if","","",12,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[11,"not_equal","","",12,{"inputs":[{"name":"self"},{"name":"intvarvalues"}],"output":{"generics":["variableerror"],"name":"result"}}],[11,"in_sorted_values","","",12,{"inputs":[{"name":"self"},{"name":"values"}],"output":{"generics":["variablestate","variableerror"],"name":"result"}}],[0,"handlers","crusp::variables","",null,null],[3,"DefaultVariablesBuilder","crusp::variables::handlers","",null,null],[3,"DefaultVariablesHandler","","",null,null],[5,"get_mut_from_handler","","",null,null],[5,"get_from_handler","","",null,null],[0,"macros","","",null,null],[3,"VarView","crusp::variables::handlers::macros","",null,null],[12,"view","","",13,null],[3,"ArrayOfVarsView","","",null,null],[12,"id","","",14,null],[3,"ArrayOfRefsView","","",null,null],[3,"TypeHandlerBuilder","","",null,null],[12,"id","","",15,null],[12,"variables","","",15,null],[12,"variables_array","","",15,null],[12,"variables_ref_view","","",15,null],[3,"TypeHandler","","",null,null],[12,"id","","",16,null],[12,"variables","","",16,null],[12,"variables_array","","",16,null],[12,"variables_ref","","",16,null],[12,"variables_ref_view","","",16,null],[4,"VarIndexType","","",null,null],[13,"FromVar","","",17,null],[13,"FromArrayOfVars","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"varindextype"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"varindextype"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"varindextype"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"varview"}}],[11,"new","","",13,{"inputs":[{"name":"processuniqueid"},{"name":"usize"}],"output":{"name":"varview"}}],[11,"new_from_array","","",13,{"inputs":[{"name":"processuniqueid"},{"name":"usize"},{"name":"usize"}],"output":{"name":"varview"}}],[11,"get_idx","","",13,{"inputs":[{"name":"self"}],"output":{"name":"varindextype"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"arrayofvarsview"}}],[11,"new","","",14,{"inputs":[{"name":"processuniqueid"},{"name":"usize"}],"output":{"name":"arrayofvarsview"}}],[11,"get","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"varview"}}],[11,"get_idx","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"arrayofrefsview"}}],[11,"new","","",18,{"inputs":[{"name":"processuniqueid"},{"name":"usize"}],"output":{"name":"arrayofrefsview"}}],[11,"get_idx","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"typehandlerbuilder"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"finalize","","",15,{"inputs":[{"name":"self"}],"output":{"name":"typehandler"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"typehandler"}}],[0,"default_handler","crusp::variables::handlers","",null,null],[3,"Builder","crusp::variables::handlers::default_handler","",null,null],[3,"Handler","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"builder"}}],[11,"new_id","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_builder","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"finalize","","",19,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"intvarvaluesbuilder"}],"output":{"name":"varview"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"generics":["intvarvaluesbuilder"],"name":"arrayofvarsbuilder"}],"output":{"name":"arrayofvarsview"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"generics":["varview"],"name":"vec"}],"output":{"name":"arrayofrefsview"}}],[11,"get_mut","","",20,null],[11,"get","","",20,null],[11,"get_mut","","",20,{"inputs":[{"name":"self"},{"name":"arrayofvarsview"}],"output":{"name":"arrayofvars"}}],[11,"get","","",20,{"inputs":[{"name":"self"},{"name":"arrayofvarsview"}],"output":{"name":"arrayofvars"}}],[11,"get_mut","","",20,{"inputs":[{"name":"self"},{"name":"arrayofrefsview"}],"output":{"name":"arrayofrefs"}}],[11,"get","","",20,{"inputs":[{"name":"self"},{"name":"arrayofrefsview"}],"output":{"name":"arrayofrefs"}}],[11,"fmt","crusp::variables::handlers","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"builder"}}],[11,"new_id","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_builder","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"finalize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"name":"intvarvaluesbuilder"}],"output":{"name":"varview"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"generics":["intvarvaluesbuilder"],"name":"arrayofvarsbuilder"}],"output":{"name":"arrayofvarsview"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"generics":["varview"],"name":"vec"}],"output":{"name":"arrayofrefsview"}}],[11,"get_mut","","",22,null],[11,"get","","",22,null],[11,"get_mut","","",22,{"inputs":[{"name":"self"},{"name":"arrayofvarsview"}],"output":{"name":"arrayofvars"}}],[11,"get","","",22,{"inputs":[{"name":"self"},{"name":"arrayofvarsview"}],"output":{"name":"arrayofvars"}}],[11,"get_mut","","",22,{"inputs":[{"name":"self"},{"name":"arrayofrefsview"}],"output":{"name":"arrayofrefs"}}],[11,"get","","",22,{"inputs":[{"name":"self"},{"name":"arrayofrefsview"}],"output":{"name":"arrayofrefs"}}],[8,"VariablesHandler","","Represents a variables handler. Variable handlers can manage many type of variables and give acces to statistics about each variables. A `VariablesHandler` does not provide acces to variable, that's why each structure that implements a `VariableHandler` should at least implements one `SpecificVariablesHandler`.",null,null],[8,"VariablesHandlerBuilder","","",null,null],[10,"new_builder","","",23,{"inputs":[],"output":{"name":"self"}}],[10,"finalize","","",23,{"inputs":[{"name":"self"}],"output":{"name":"varhandler"}}],[8,"VariableContainerView","","This trait design the view associated to a type of variable managed by a `SpecificTypeHandler`.",null,null],[16,"Container","","The `Type` managed by the Handler (Variable or Array of Variable).",24,null],[16,"Variable","","The type of `Variable` managed by the handler (Type == Variable if the Type is a variable).",24,null],[8,"VariableContainerHandler","","Gives immutable and mutable acces to owned variables. A `SpecificVariablesHandler` gives access to only one type of variable. The acces to a variable is done via a `View`. It's highly recommended to use one view for one type of `Variable`. When a structure implements the `SpecificVariablesHandler` for for a specific `Variable` `Var`, it should also implements the `SpecificVariablesHandler` trait for an `ArrayOfVars<Var>` and an `ArrayOfRefs<Var>` (each of these three `SpecificVariablesHandler` should have its own view).",null,null],[10,"get_mut","","",25,null],[10,"get","","",25,null],[8,"VariableContainerHandlerBuilder","","",null,null],[10,"add","","",26,{"inputs":[{"name":"self"},{"name":"param"}],"output":{"name":"view"}}],[0,"macros","crusp::variables","",null,null],[8,"ArrayBuilder","","Trait used to an array of variable;",null,null],[16,"Builder","","",27,null],[10,"into_iter","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[8,"VariableBuilder","","Trait used to build a variable. `SpecificVariablesHandler` requires to add VariableBuiler or ArrayBuilder in order to assign them one unique id.",null,null],[16,"Variable","","",28,null],[10,"finalize","","",28,null],[8,"Variable","","Trait for types that represent decision variables. A decision variable is variable along side with its domain of allowed values. A variable has to be cloneable because the (tree based) searching process is based on cloning.",null,null],[16,"Type","","The underlying type holded by the `Variable`.",29,null],[10,"is_affected","","Returns if the variable is affected. A variable is affected if and only if its a domain is a singleton.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"value","","Returns the value of the variable or `None` if the variable is not affected.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"id","","Returns the state of the variable without reinitialising it. The state of a variable describes if and how the domain of the variable has been updated.",29,{"inputs":[{"name":"self"}],"output":{"name":"variableid"}}],[11,"iter_ids","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[8,"Array","","This trait describes an array of variables. There is two types of array: array of variables and array of references to variables. Both types are manipulated with the same trait. When writting constraints over an array of variables, you should use the `Array` trait instead of the specific types `ArrayOfVars` or `ArrayOfRefs`.",null,null],[16,"Variable","","",30,null],[10,"get_mut","","Returns a mutable reference to the variable at that position or None if out of bounds.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"get","","Returns a reference to the variable at that position or None if out of bounds.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"get_unchecked_mut","","Returns a mutable reference to the variable at that position without doing bounds check.",30,null],[10,"get_unchecked","","Returns a reference to the variable at that position without doing bounds check.",30,null],[10,"iter","","Returns an iterator over the variables.",30,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[10,"iter_mut","","Returns an iterator that allows modifying each variable.",30,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[10,"len","","Returns the number of variables.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter_ids","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"variablestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"variablestate"}],"output":{"name":"bool"}}],[11,"is_subsumed_under","","Subsomption relations * `MaxBoundChange` subsumed `BoundsChange` * `MinBoundChange` subsumed `BoundsChange` * `BoundsChange` subsumed `ValuesChange` * `ValuesChange` subsumed `NoChange`",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableerror"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variableerror"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"variableid"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"variableid"}],"output":{"name":"ordering"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"arrayofvarsbuilder"}}],[11,"new","","Creates a new `ArrayOfVars` or None if the number of variables is null.",32,{"inputs":[{"name":"usize"},{"name":"builder"}],"output":{"name":"option"}}],[11,"into_iter","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"arrayofvars"}}],[11,"new","","Creates a new `ArrayOfVars` or None if the number of variables is null.",33,{"inputs":[{"name":"usize"},{"name":"var"}],"output":{"name":"option"}}],[11,"new_from_iter","","Arguments",33,null],[11,"get_mut","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked_mut","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"var"}}],[11,"get_unchecked","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"var"}}],[11,"iter","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"iter_mut","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"arrayofrefs"}}],[11,"get_mut","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked_mut","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"var"}}],[11,"get_unchecked","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"var"}}],[11,"iter","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"iter_mut","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"constraints","crusp","",null,null],[3,"AllDifferent","crusp::constraints","",null,null],[3,"Increasing","","",null,null],[3,"SumConstraint","","",null,null],[4,"ConstraintState","","",null,null],[13,"Ready","","",35,null],[13,"NotReady","","",35,null],[4,"PropagationState","","",null,null],[13,"FixPoint","","",36,null],[13,"Subsumed","","",36,null],[13,"NoChange","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"alldifferent"}}],[11,"new","","",37,{"inputs":[{"name":"views"}],"output":{"name":"self"}}],[11,"box_clone","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",37,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",37,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",37,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",37,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[0,"handlers","","",null,null],[3,"DefaultConstraintsHandlerBuilder","crusp::constraints::handlers","",null,null],[3,"DefaultConstraintsHandler","","",null,null],[8,"ConstraintsHandlerBuilder","","",null,null],[10,"new_builder","","",38,{"inputs":[],"output":{"name":"self"}}],[10,"add","","",38,{"inputs":[{"name":"self"},{"generics":["constraint"],"name":"box"}],"output":null}],[10,"finalize","","",38,{"inputs":[{"name":"self"},{"name":"variables"}],"output":{"generics":["variableerror"],"name":"result"}}],[8,"ConstraintsHandler","","",null,null],[10,"propagate_all","","",39,{"inputs":[{"name":"self"},{"name":"variables"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"new","","",40,{"inputs":[],"output":{"name":"defaultconstraintshandlerbuilder"}}],[11,"new_builder","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"add","","",40,{"inputs":[{"name":"self"},{"generics":["constraint"],"name":"box"}],"output":null}],[11,"finalize","","",40,{"inputs":[{"name":"self"},{"name":"variables"}],"output":{"generics":["defaultconstraintshandler","variableerror"],"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"defaultconstraintshandler"}}],[11,"propagate_all","","",41,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[0,"arithmetic","crusp::constraints","",null,null],[3,"GreaterOrEqualThan","crusp::constraints::arithmetic","",null,null],[3,"GreaterThan","","",null,null],[3,"LessOrEqualThan","","",null,null],[3,"LessThan","","",null,null],[3,"Equal","","",null,null],[3,"EqualBounds","","",null,null],[3,"AddConstant","","",null,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"lessthan"}}],[11,"new","","",42,{"inputs":[{"name":"view"},{"name":"view"}],"output":{"name":"lessthan"}}],[11,"box_clone","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",42,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",42,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",42,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",42,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"lessorequalthan"}}],[11,"new","","",43,{"inputs":[{"name":"view"},{"name":"view"}],"output":{"name":"lessorequalthan"}}],[11,"box_clone","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",43,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",43,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",43,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",43,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"greaterthan"}}],[11,"new","","",44,{"inputs":[{"name":"view"},{"name":"view"}],"output":{"name":"greaterthan"}}],[11,"box_clone","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",44,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",44,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",44,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",44,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"greaterorequalthan"}}],[11,"new","","",45,{"inputs":[{"name":"view"},{"name":"view"}],"output":{"name":"greaterorequalthan"}}],[11,"box_clone","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",45,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",45,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",45,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",45,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"equal"}}],[11,"new","","",46,{"inputs":[{"name":"view"},{"name":"view"}],"output":{"name":"equal"}}],[11,"box_clone","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",46,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",46,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",46,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",46,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"equalbounds"}}],[11,"new","","",47,{"inputs":[{"name":"view"},{"name":"view"}],"output":{"name":"equalbounds"}}],[11,"box_clone","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",47,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",47,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",47,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",47,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"addconstant"}}],[11,"new","","",48,{"inputs":[{"name":"view"},{"name":"view"},{"name":"var"}],"output":{"name":"addconstant"}}],[11,"box_clone","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",48,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",48,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",48,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",48,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"clone","crusp::constraints","",49,{"inputs":[{"name":"self"}],"output":{"name":"increasing"}}],[11,"new","","",49,{"inputs":[{"name":"views"}],"output":{"name":"increasing"}}],[11,"box_clone","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",49,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",49,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",49,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",49,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sumconstraint"}}],[11,"new","","",50,{"inputs":[{"name":"view"},{"name":"views"},{"name":"coefs"}],"output":{"name":"sumconstraint"}}],[11,"box_clone","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[11,"propagate","","",50,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[11,"prepare","","",50,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[11,"result","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"dependencies","","",50,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"initialise","","",50,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[8,"ConstraintBuilder","","",null,null],[8,"Constraint","","Trait defining a constraint. The generic type is mandatory for the `Constraint`, even if the `Constraint` depends more on its underlying variables. Indeed, the constraints handlers store all the constraint the same, so the constraints are used as trait objects, so they require to have the same type. Having the Handler as a generic parameter to the propagate function will not allow to use `Constraint` as a trait object.",null,null],[10,"box_clone","","Constraints have to define `box_clone` in order to be cloned. The `ConstraintsHandler` handle many kind of variables, so it uses constraints as trait object. Trait object can not be cloned because `Clone` require the trait to be `Sized` but trait object can not be `Sized`. `box_clone` is a way to bypass this requirement, but `box_clone` can not guarantee that the clone is the same as the original, it is the `Constraint` developper to guarantee that the clone is equivalent to the original. Equivalent means to provide the same solution during the search not to be the same.",51,{"inputs":[{"name":"self"}],"output":{"generics":["constraint"],"name":"box"}}],[10,"propagate","","",51,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[10,"initialise","","Initialisation should guarantee that the `Constraint` does not manipulate twice the same view. Since view of `ArrayOfRefs` does not hold any information about their underlying views (variables), it is necessary to ask this information to the variables handler. Indeed, `VariableView` has to implement the `Copy` trait. The structures implementing `Copy` must support a memcopy (i.e. the structure can be copy byte by byte and its size must be known at compile time), nevertheless ArrayOfRefs refers to non-contigous variables in memory so, in general, it requires to hold a dynamic array (Vec) of variables which the size is known at runtime.",51,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["propagationstate","variableerror"],"name":"result"}}],[10,"prepare","","Prepares the `Constraint` by giving it its variables that have change since its last propagation.",51,{"inputs":[{"name":"self"},{"generics":["iterator"],"name":"box"}],"output":null}],[10,"result","","Asks the `Constraint` which variables it has modified after its last propagation.",51,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[10,"dependencies","","Asks the `Constraint` its variables dependency.",51,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["iterator"],"name":"box"}}],[8,"PropagatorState","","",null,null],[8,"Propagator","","",null,null],[0,"branchers","crusp","",null,null],[3,"BranchersHandler","crusp::branchers","",null,null],[0,"brancher","","",null,null],[3,"DefaultBrancher","crusp::branchers::brancher","",null,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"defaultbrancher"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",52,{"inputs":[{"name":"varsel"},{"name":"valsel"}],"output":{"generics":["defaultbrancher"],"name":"option"}}],[11,"branch","","",52,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["box"],"name":"result"}}],[11,"mutated_clone","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["brancher"],"name":"box"}}],[11,"specific_branch","","",52,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["box"],"name":"result"}}],[0,"values_selector","crusp::branchers","",null,null],[3,"DomainOrderValueSelector","crusp::branchers::values_selector","",null,null],[3,"MinValueSelector","","",null,null],[3,"MaxValueSelector","","",null,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"domainordervalueselector"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"domainordervalueselector"}}],[11,"select","","",53,{"inputs":[{"name":"self"},{"name":"handler"},{"name":"view"}],"output":{"generics":["box"],"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"minvalueselector"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",54,{"inputs":[],"output":{"name":"minvalueselector"}}],[11,"select","","",54,{"inputs":[{"name":"self"},{"name":"handler"},{"name":"view"}],"output":{"generics":["box"],"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"maxvalueselector"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"maxvalueselector"}}],[11,"select","","",55,{"inputs":[{"name":"self"},{"name":"handler"},{"name":"view"}],"output":{"generics":["box"],"name":"result"}}],[0,"variables_selector","crusp::branchers","",null,null],[3,"SequentialVariableSelector","crusp::branchers::variables_selector","",null,null],[3,"SmallestDomainVariableSelector","","",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"sequentialvariableselector"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",56,{"inputs":[{"name":"views"}],"output":{"generics":["sequentialvariableselector"],"name":"result"}}],[11,"select","","",56,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"smallestdomainvariableselector"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,{"inputs":[{"name":"views"}],"output":{"generics":["smallestdomainvariableselector"],"name":"result"}}],[11,"select","","",57,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"name":"result"}}],[8,"VariableSelector","crusp::branchers","",null,null],[10,"select","","",58,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"name":"result"}}],[8,"ValuesSelector","","",null,null],[10,"select","","",59,{"inputs":[{"name":"self"},{"name":"handler"},{"name":"view"}],"output":{"generics":["box"],"name":"result"}}],[8,"SpecificBrancher","","",null,null],[10,"specific_branch","","",60,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["box"],"name":"result"}}],[8,"Brancher","","",null,null],[10,"branch","","",61,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["box"],"name":"result"}}],[10,"mutated_clone","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["brancher"],"name":"box"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"branchershandler"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"branchershandler"}}],[11,"add_specific_brancher","","",62,{"inputs":[{"name":"self"},{"generics":["brancher"],"name":"box"}],"output":null}],[11,"branch","","",62,{"inputs":[{"name":"self"},{"name":"handler"}],"output":{"generics":["box"],"name":"result"}}],[0,"graph","crusp","",null,null],[3,"BipartiteGraph","crusp::graph","",null,null],[3,"BipartiteGraphBuilder","","",null,null],[3,"GraphEvents","","",null,null],[3,"Event","","",null,null],[8,"Subsumed","","",null,null],[10,"is_subsumed_under","","",63,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bipartitegraph"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"new","","",66,{"inputs":[],"output":{"name":"self"}}],[11,"insert_node1_to_node2","","",66,{"inputs":[{"name":"self"},{"name":"node1"},{"name":"edge"},{"name":"node2"}],"output":null}],[11,"finalize","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bipartitegraph"}}],[11,"events","","",64,{"inputs":[{"name":"self"}],"output":{"name":"graphevents"}}],[11,"add_event","","",67,{"inputs":[{"name":"self"},{"name":"node1"},{"name":"node2"},{"name":"edge"}],"output":null}],[11,"into_iter","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",65,{"inputs":[{"name":"node1"},{"name":"node2"},{"name":"cause"}],"output":{"name":"self"}}],[11,"is_subsumed_under","","",65,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[0,"search","crusp","",null,null],[3,"Solver","crusp::search","",null,null],[0,"dsl","","",null,null],[0,"parallel","","",null,null],[3,"ParallelSolver","crusp::search::parallel","",null,null],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"parallelsolver"}}],[11,"new","","",68,{"inputs":[{"name":"space"}],"output":{"name":"parallelsolver"}}],[11,"solve","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"solution","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["space"],"name":"option"}}],[0,"path_recomputing","crusp::search","",null,null],[3,"SolverPathRecomputing","crusp::search::path_recomputing","",null,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"solverpathrecomputing"}}],[11,"from","","",69,{"inputs":[{"name":"space"}],"output":{"name":"self"}}],[11,"new","","",69,{"inputs":[{"name":"space"}],"output":{"name":"solverpathrecomputing"}}],[11,"new_stop","","",69,{"inputs":[{"name":"space"},{"generics":["atomicbool"],"name":"arc"}],"output":{"name":"solverpathrecomputing"}}],[11,"solve","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"solution","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["space"],"name":"option"}}],[11,"clone","crusp::search","",70,{"inputs":[{"name":"self"}],"output":{"name":"solver"}}],[11,"new","","",70,{"inputs":[{"name":"space"}],"output":{"name":"solver"}}],[11,"solve","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"solution","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["space"],"name":"option"}}],[0,"spaces","crusp","",null,null],[3,"SpaceBuilder","crusp::spaces","",null,null],[3,"Space","","",null,null],[12,"variables","","",71,null],[3,"SpaceIterator","","",null,null],[4,"SpaceState","","",null,null],[13,"Subsumed","","",72,null],[13,"Branches","","",72,null],[4,"BranchState","","",null,null],[13,"Subsumed","","",73,null],[13,"Branches","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"spacebuilder"}}],[11,"new","","",74,{"inputs":[{"name":"variablesbuilder"},{"name":"constraintsbuilder"},{"name":"branchershandler"}],"output":{"name":"self"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"space"}}],[11,"new","","",71,{"inputs":[{"name":"variables"},{"name":"constraints"},{"name":"branchershandler"}],"output":{"name":"space"}}],[11,"get_variable","","",71,null],[11,"run","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["spacestate","variableerror"],"name":"result"}}],[11,"run_branch","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["branchstate","variableerror"],"name":"result"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[14,"unwrap_or_break","crusp","",null,null],[14,"unwrap_first","","",null,null],[14,"unwrap_last","","",null,null],[14,"expr","","",null,null],[14,"unsafe_from_raw_point","","",null,null],[14,"variables_handler_build","","",null,null],[14,"value","","",null,null],[14,"cp_model","","",null,null]],"paths":[[4,"VariableState"],[4,"VariableError"],[3,"BoolVar"],[8,"FiniteDomain"],[8,"IterableDomain"],[8,"FromRangeDomain"],[8,"FromValuesDomain"],[8,"AssignableDomain"],[8,"OrderedDomain"],[8,"PrunableDomain"],[8,"OrderedPrunableDomain"],[3,"IntVarValuesBuilder"],[3,"IntVarValues"],[3,"VarView"],[3,"ArrayOfVarsView"],[3,"TypeHandlerBuilder"],[3,"TypeHandler"],[4,"VarIndexType"],[3,"ArrayOfRefsView"],[3,"Builder"],[3,"Handler"],[3,"DefaultVariablesBuilder"],[3,"DefaultVariablesHandler"],[8,"VariablesHandlerBuilder"],[8,"VariableContainerView"],[8,"VariableContainerHandler"],[8,"VariableContainerHandlerBuilder"],[8,"ArrayBuilder"],[8,"VariableBuilder"],[8,"Variable"],[8,"Array"],[3,"VariableId"],[3,"ArrayOfVarsBuilder"],[3,"ArrayOfVars"],[3,"ArrayOfRefs"],[4,"ConstraintState"],[4,"PropagationState"],[3,"AllDifferent"],[8,"ConstraintsHandlerBuilder"],[8,"ConstraintsHandler"],[3,"DefaultConstraintsHandlerBuilder"],[3,"DefaultConstraintsHandler"],[3,"LessThan"],[3,"LessOrEqualThan"],[3,"GreaterThan"],[3,"GreaterOrEqualThan"],[3,"Equal"],[3,"EqualBounds"],[3,"AddConstant"],[3,"Increasing"],[3,"SumConstraint"],[8,"Constraint"],[3,"DefaultBrancher"],[3,"DomainOrderValueSelector"],[3,"MinValueSelector"],[3,"MaxValueSelector"],[3,"SequentialVariableSelector"],[3,"SmallestDomainVariableSelector"],[8,"VariableSelector"],[8,"ValuesSelector"],[8,"SpecificBrancher"],[8,"Brancher"],[3,"BranchersHandler"],[8,"Subsumed"],[3,"BipartiteGraph"],[3,"Event"],[3,"BipartiteGraphBuilder"],[3,"GraphEvents"],[3,"ParallelSolver"],[3,"SolverPathRecomputing"],[3,"Solver"],[3,"Space"],[4,"SpaceState"],[4,"BranchState"],[3,"SpaceBuilder"],[3,"SpaceIterator"]]};
initSearch(searchIndex);
